import streamlit as st
import pandas as pd
import numpy as np
from unequal_prob_sampling import (
    piar_defaut,
    piar_lahiri,
    pisr_poisson,
    pisr_systematique,
    pisr_sunter
)
from estimation import tableau_resultats

def run_proba_inegale_interface(df):
    st.title("üéØ √âchantillonnage √† probabilit√©s in√©gales")
    st.markdown("""
    Dans cette section, vous pouvez r√©aliser un √©chantillonnage selon des **probabilit√©s d‚Äôinclusion in√©gales**.
    Ces m√©thodes permettent de **favoriser certaines unit√©s** en fonction de leur poids (taille, importance, etc.).
    """)

    # V√©rification des donn√©es
    if "data" not in st.session_state:
        st.warning("‚ö†Ô∏è Veuillez d'abord importer une base de donn√©es via l‚Äôonglet **Chargement des donn√©es**.")
        return

    df = st.session_state["data"].copy()

    # Section : Configuration
    with st.expander("‚öôÔ∏è Param√®tres d'√©chantillonnage", expanded=True):
        st.markdown("Veuillez configurer les param√®tres ci-dessous pour r√©aliser l‚Äô√©chantillonnage :")
        
        col_id = st.selectbox("üìå **Colonne identifiant les unit√©s (ID)**", options=df.columns)
        col_poids = st.selectbox("‚öñÔ∏è **Colonne des poids / probabilit√©s œÄ·µ¢**", options=df.columns)
        
        m√©thode = st.selectbox("üìà **M√©thode d‚Äô√©chantillonnage**", [
            "PIAR - M√©thode par d√©faut (cumuls)",
            "PIAR - M√©thode de Lahiri",
            "PISR - Poisson",
            "PISR - Syst√©matique",
            "PISR - M√©thode de Sunter"
        ])

        if m√©thode != "PISR - Poisson":
            n = st.number_input(
                "üî¢ **Taille de l‚Äô√©chantillon √† tirer (n)**",
                min_value=1,
                max_value=len(df),
                step=1
            )
        else:
            n = None
            st.markdown("‚ÑπÔ∏è La m√©thode **Poisson** tire un √©chantillon de taille variable selon les probabilit√©s d‚Äôinclusion.")

        bouton = st.button("üé≤ Lancer l‚Äô√©chantillonnage")

    if bouton:
        try:
            if m√©thode == "PIAR - M√©thode par d√©faut (cumuls)":
                r√©sultat = piar_defaut(df, n=n, col_id=col_id, col_poids=col_poids)
            elif m√©thode == "PIAR - M√©thode de Lahiri":
                r√©sultat = piar_lahiri(df, n=n, col_id=col_id, col_poids=col_poids)
            elif m√©thode == "PISR - Poisson":
                r√©sultat = pisr_poisson(df, col_id=col_id, col_pi=col_poids)
            elif m√©thode == "PISR - Syst√©matique":
                somme_pi = df[col_poids].sum()
                if abs(somme_pi - n) > 1e-3:
                    st.warning(f"‚ö†Ô∏è La somme des œÄ·µ¢ est {somme_pi:.2f}, mais elle devrait √™tre proche de n = {n}.")
                r√©sultat = pisr_systematique(df, n=n, col_id=col_id, col_pi=col_poids)
            elif m√©thode == "PISR - M√©thode de Sunter":
                r√©sultat = pisr_sunter(df, n=n, col_id=col_id, col_pi=col_poids)
            else:
                st.error("‚ùå M√©thode non reconnue.")
                return

            st.success("‚úÖ √âchantillonnage r√©alis√© avec succ√®s ! Voici l‚Äô√©chantillon obtenu :")
            st.dataframe(r√©sultat)

            csv = r√©sultat.to_csv(index=False).encode('utf-8')
            st.download_button("‚¨áÔ∏è T√©l√©charger l‚Äô√©chantillon", data=csv, file_name="echantillon_inegal.csv", mime='text/csv')

            # ===== Estimation des param√®tres (si Y pr√©sente) =====
            st.markdown("---")
            st.subheader("üìä R√©sultats d'estimation sur la variable d'int√©r√™t")

            if "Y" in r√©sultat.columns:
                echantillon_clean = r√©sultat.dropna(subset=["Y", col_poids])

                if len(echantillon_clean) == 0:
                    st.warning("‚ö†Ô∏è Aucune donn√©e exploitable pour l'estimation : la variable `Y` est manquante pour toutes les unit√©s s√©lectionn√©es.")
                else:
                    y = echantillon_clean["Y"]
                    pik = echantillon_clean[col_poids].astype(float).to_numpy()
                    N_pop = len(df)

                    # Matrice des probabilit√©s d‚Äôinclusion doubles (sous hypoth√®se rho=1)
                    rho = 1
                    pikl = np.outer(pik, pik) * rho
                    np.fill_diagonal(pikl, pik)

                    resultats = tableau_resultats(y, pik, pikl, N=N_pop, alpha=0.05)
                    st.dataframe(resultats.dropna().style.format(precision=3).set_caption("Tableau des r√©sultats statistiques"))

                    with st.expander("‚ÑπÔ∏è Hypoth√®ses utilis√©es pour l'estimation"):
                        st.markdown("""
                        Les estimateurs affich√©s sont :
                        - **Moyenne empirique**  
                        - **Total empirique**  
                        - **H√°jek** (moyenne et total)  
                        - **Horvitz-Thompson** (total)

                        Hypoth√®ses :
                        - Probabilit√©s d'inclusion fournies via la colonne œÄ·µ¢
                        - Ind√©pendance suppos√©e entre les unit√©s (œÅ = 1)
                        """)
            else:
                st.info("‚ÑπÔ∏è La variable `Y` n'est pas pr√©sente dans l‚Äô√©chantillon ‚Äî estimation non effectu√©e.")

        except Exception as e:
            st.error(f"‚ùå Une erreur est survenue lors de l‚Äô√©chantillonnage : **{str(e)}**")
